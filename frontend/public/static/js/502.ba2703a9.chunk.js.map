{"version":3,"file":"static/js/502.ba2703a9.chunk.js","mappings":"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","sources":["cmps/project-edit-widget.jsx","cmps/project-preview.jsx","cmps/project-list.jsx","pages/project-index.jsx"],"sourcesContent":["import { useState, useRef } from \"react\"\r\nimport SlTooltip from '@shoelace-style/shoelace/dist/react/tooltip'\r\n\r\nexport function ProjectEditWidget({ currProject, setCurrProject, update, field }) {\r\n    const [isActive, setIsActive] = useState(false)\r\n    const fieldValue = currProject[field]\r\n    const widgetClasses = [`widget`, `project-${field}-widget`, (isActive ? `input-active` : ``)]\r\n    const inputRef = useRef(null)\r\n\r\n    const handleEditProject = (event) => {\r\n        const updatedField = getUpdatedField(event)\r\n        const updatedProject = { ...currProject, ...updatedField }\r\n        update(updatedProject)\r\n        setCurrProject(updatedProject)\r\n        setIsActive(false)\r\n    }\r\n\r\n    const getUpdatedField = (event) => {\r\n        const inputValue = event.currentTarget.value\r\n        const updatedField = {}\r\n        updatedField[field] = inputValue\r\n        return updatedField\r\n    }\r\n\r\n    const handleFocus = () => {\r\n        setIsActive(true)\r\n    }\r\n\r\n    const enterEditMode = () => {\r\n        if (inputRef.current) {\r\n            setIsActive(true)\r\n            inputRef.current.focus()\r\n            window.addEventListener('keydown', (event) => {\r\n                if (event.key === 'Enter') {\r\n                    setIsActive(false)\r\n                    inputRef.current.blur()\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div\r\n            className={widgetClasses.join(' ')}\r\n            data-field={field}\r\n            onDoubleClick={enterEditMode}\r\n\r\n        >\r\n            <SlTooltip content={`Edit ${field}`}>\r\n                <div className=\"label\" title={field}>\r\n                    <span>{fieldValue}</span>\r\n                </div>\r\n            </SlTooltip>\r\n\r\n            <textarea\r\n                defaultValue={fieldValue}\r\n                aria-label=\"Change project title\"\r\n                type=\"text\"\r\n                onFocus={handleFocus}\r\n                onBlur={handleEditProject}\r\n                ref={inputRef}\r\n            >\r\n            </textarea>\r\n        </div>\r\n    )\r\n}","import { useState } from \"react\"\r\nimport { ProjectEditWidget } from \"./project-edit-widget\"\r\nimport SlProgressBar from '@shoelace-style/shoelace/dist/react/progress-bar'\r\nimport { utilService } from \"../services/util.service\"\r\n\r\n\r\nexport function ProjectPreview({ project, projectActions }) {\r\n\r\n    const [currProject, setCurrProject] = useState(project)\r\n    const { title, description, wordcount, targetWordcount } = currProject\r\n    const { remove, add, update } = projectActions\r\n    const projectFields = [\"title\", \"description\"]\r\n    const isCompleted = (wordcount >= targetWordcount)\r\n    const wordcountPercentage = utilService.getPercentage(wordcount, targetWordcount)\r\n\r\n    return (\r\n        <article className=\"project-preview\">\r\n            <ul>\r\n                {projectFields.map((projectField, idx) => {\r\n                    return (\r\n                        <li key={idx}>\r\n                            <ProjectEditWidget\r\n                                currProject={currProject}\r\n                                setCurrProject={setCurrProject}\r\n                                update={update}\r\n                                field={projectField}\r\n                            />\r\n                        </li>\r\n                    )\r\n                })}\r\n\r\n            </ul>\r\n\r\n            <div className=\"project-progress\">\r\n                <div className=\"progress-bar-wrapper\">\r\n                <SlProgressBar className=\"progress-bar\" value={wordcountPercentage}>{wordcountPercentage}%</SlProgressBar>\r\n                </div>\r\n\r\n                <p className={`progress-text ${isCompleted ? 'completed' : ''}`}>\r\n                    <span className=\"wordcount\">{wordcount}</span> / <span className=\"target\">{targetWordcount}</span> words\r\n                </p>\r\n            </div>\r\n        </article>\r\n    )\r\n}\r\n","import { ProjectPreview } from './project-preview.jsx'\r\n\r\nexport function ProjectList({ projects, projectActions }) {\r\n    const { remove, add, update } = projectActions\r\n\r\n    return (\r\n        <ul className=\"project-list\">\r\n            {projects.map(project => {\r\n                return (\r\n                    <li key={project._id}>\r\n                        <ProjectPreview project={project} projectActions={projectActions} />\r\n                        <div className=\"project-actions\">\r\n                            <button className=\"remove-project\" onClick={() => remove(project._id)}>\r\n                                remove\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}","import { useEffect } from 'react'\r\nimport { ProjectList } from '../cmps/project-list.jsx'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectAllProjects,loadProjects, addProject, removeProject, updateProject } from '../store/projects/project.reducer.js'\r\nimport { projectService } from '../services/project.service.js'\r\n\r\nexport default function ProjectIndex() {\r\n    const projects = useSelector(selectAllProjects) // array\r\n    const dispatch = useDispatch()\r\n    \r\n    useEffect(() => {\r\n        dispatch(loadProjects())\r\n    },[])\r\n   \r\n    const handleRemoveProject = (projectId) => {\r\n        dispatch(removeProject(projectId))\r\n    }\r\n    \r\n    const handleAddProject = (projectId) => {\r\n        let newProject = projectService.getEmptyProject()\r\n        dispatch(addProject(newProject)) \r\n    }\r\n\r\n    const handleUpdateProject =  (updatedProject) => {\r\n        dispatch(updateProject(updatedProject))\r\n    }\r\n    \r\n    const projectActions = {\r\n        remove: handleRemoveProject,\r\n        add: handleAddProject,\r\n        update: handleUpdateProject\r\n    }\r\n    \r\n    //TODO: animation on remove project\r\n\r\n    return (\r\n        <section className=\"project-index\">\r\n            <h2>project index</h2>\r\n            <button\r\n                className=\"add-project\"\r\n                onClick={projectActions.add}\r\n            >\r\n                Add project\r\n            </button>\r\n            <ProjectList projects={projects} projectActions={projectActions}  />\r\n        </section>\r\n    )\r\n}\r\n\r\n// TODO: add pagination"],"names":["ProjectEditWidget","_ref","currProject","setCurrProject","update","field","isActive","setIsActive","useState","fieldValue","widgetClasses","concat","inputRef","useRef","getUpdatedField","event","inputValue","currentTarget","value","updatedField","_jsxs","className","join","onDoubleClick","enterEditMode","current","focus","window","addEventListener","key","blur","children","_jsx","SlTooltip","content","title","defaultValue","type","onFocus","handleFocus","onBlur","updatedProject","ref","ProjectPreview","project","projectActions","description","wordcount","targetWordcount","remove","add","isCompleted","wordcountPercentage","utilService","getPercentage","map","projectField","idx","SlProgressBar","ProjectList","projects","onClick","_id","ProjectIndex","useSelector","selectAllProjects","dispatch","useDispatch","useEffect","loadProjects","projectId","removeProject","newProject","projectService","getEmptyProject","addProject","updateProject"],"sourceRoot":""}